=============================================================================
List of generated methods in project: RTOSDemo

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "TickTimer" (bean TimerInt)
   - TickTimer_Enable -Enables the bean - it starts the timer. Events may be generated ("DisableEvent"/"EnableEvent").
   - TickTimer_SetFreqHz -This method sets the new frequency of the generated events. The frequency is expressed in [Hz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.

Module "SW1Int"    (bean ExtInt)
   - SW1Int_Enable -Enable the bean - the external events are accepted.

Module "SW2"       (bean BitIO)
   - SW2_GetVal -Returns the value of the Input/Output bean. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations).

Module "SW3"       (bean BitIO)
   - SW3_GetVal -Returns the value of the Input/Output bean. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations).

Module "SW4"       (bean BitIO)
   - SW4_GetVal -Returns the value of the Input/Output bean. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations).

Module "LED1"      (bean BitIO)
   - LED1_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - LED1_ClrVal -Clears (set to zero) the Input/Output bean. It is the same as [PutVal(FALSE)]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).
   - LED1_SetVal -Sets (to one) the Input/Output bean. It is the same as [PutVal(TRUE)]. (Method is available only if the 
                direction = _[output]_ or _[input/output]_).
   - LED1_NegVal -Negates (inverts) the Input/Output bean. It is the same as [PutVal(!GetVal())]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).

Module "LED2"      (bean BitIO)
   - LED2_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - LED2_ClrVal -Clears (set to zero) the Input/Output bean. It is the same as [PutVal(FALSE)]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).
   - LED2_SetVal -Sets (to one) the Input/Output bean. It is the same as [PutVal(TRUE)]. (Method is available only if the 
                direction = _[output]_ or _[input/output]_).
   - LED2_NegVal -Negates (inverts) the Input/Output bean. It is the same as [PutVal(!GetVal())]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).

Module "LED3"      (bean BitIO)
   - LED3_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - LED3_ClrVal -Clears (set to zero) the Input/Output bean. It is the same as [PutVal(FALSE)]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).
   - LED3_SetVal -Sets (to one) the Input/Output bean. It is the same as [PutVal(TRUE)]. (Method is available only if the 
                direction = _[output]_ or _[input/output]_).
   - LED3_NegVal -Negates (inverts) the Input/Output bean. It is the same as [PutVal(!GetVal())]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).

Module "LED4"      (bean BitIO)
   - LED4_ClrVal -Clears (set to zero) the Input/Output bean. It is the same as [PutVal(FALSE)]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).
   - LED4_SetVal -Sets (to one) the Input/Output bean. It is the same as [PutVal(TRUE)]. (Method is available only if the 
                direction = _[output]_ or _[input/output]_).
   - LED4_NegVal -Negates (inverts) the Input/Output bean. It is the same as [PutVal(!GetVal())]. (Method is available only if 
                the direction = _[output]_ or _[input/output]_).

Module "UART"      (bean AsynchroSerial)
   - UART_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.   DMA mode:  If DMA controller 
                is available on the selected CPU and the receiver is configured to use DMA controller then this method only 
                sets the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. 
                See an example of a typical usage for details about the communication using DMA.
   - UART_SendChar -Sends one character to the channel. If the bean is temporarily disabled (Disable method) SendChar method 
                only stores data into an output buffer. In case of a zero output buffer size, only one character can be stored. 
                Enabling the bean (Enable method) starts the transmission of the stored data. This method is available only if 
                the transmitter property is enabled.  DMA mode:  If DMA controller is available on the selected CPU and the 
                transmitter is configured to use DMA controller then this method only sets selected DMA channel. Then the 
                status of the DMA transfer can be checked using  GetCharsInTxBuf method. See an example of a typical usage for 
                details about communication using DMA.
   - UART_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  DMA mode:  If DMA controller is 
                available on the selected CPU and the receiver is configured to use DMA controller then this method only sets 
                the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. See 
                an example of a typical usage for details about communication using DMA.
   - UART_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.  DMA mode:  If DMA controller is available on 
                the selected CPU and the transmitter is configured to use DMA controller then this method only sets the 
                selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInTxBuf method. See 
                typical usage for details about communication using DMA.
   - UART_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.  DMA mode:  If DMA controller is available on the selected CPU 
                and the receiver is configured to use DMA controller then this method only stops selected DMA channel.
   - UART_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.  DMA mode:  If DMA controller is available on the selected CPU 
                and the transmitter is configured to use DMA controller then this method only stops selected DMA channel.
   - UART_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.  DMA mode:  If DMA controller is available on the selected CPU and the receiver is 
                configured to use DMA controller then this method returns the number of characters in the receive buffer.
   - UART_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.  DMA mode:  If DMA controller is available on the selected CPU and the 
                transmitter is configured to use DMA controller then this method returns the number of characters in the 
                transmit buffer.

Module "USB"       (bean AsynchroSerial)
   - USB_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.   DMA mode:  If DMA controller 
                is available on the selected CPU and the receiver is configured to use DMA controller then this method only 
                sets the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. 
                See an example of a typical usage for details about the communication using DMA.
   - USB_SendChar -Sends one character to the channel. If the bean is temporarily disabled (Disable method) SendChar method 
                only stores data into an output buffer. In case of a zero output buffer size, only one character can be stored. 
                Enabling the bean (Enable method) starts the transmission of the stored data. This method is available only if 
                the transmitter property is enabled.  DMA mode:  If DMA controller is available on the selected CPU and the 
                transmitter is configured to use DMA controller then this method only sets selected DMA channel. Then the 
                status of the DMA transfer can be checked using  GetCharsInTxBuf method. See an example of a typical usage for 
                details about communication using DMA.
   - USB_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.  DMA mode:  If DMA controller is available on the selected CPU and the receiver is 
                configured to use DMA controller then this method returns the number of characters in the receive buffer.
   - USB_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.  DMA mode:  If DMA controller is available on the selected CPU and the 
                transmitter is configured to use DMA controller then this method returns the number of characters in the 
                transmit buffer.

Module "MC13191"   (bean SPIMaster)
   - MC13191_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data).  DMA mode:  If DMA controller is available on selected CPU and receiver is configured to 
                use DMA controller then this method only sets the selected DMA channel. Status of the DMA transfer can then be 
                checked using method GetCharsInRxBuf. See typical usage for details about communication using DMA.
   - MC13191_SendChar -Sends one character to the channel.  DMA mode:  If DMA controller is available on the selected CPU and 
                the transmitter is configured to use DMA controller then this method only sets the selected DMA channel. The 
                status of the DMA transfer can then be checked using GetCharsInTxBuf method. See the typical usage for details 
                about communication using DMA.
   - MC13191_CharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.  (deprecated method)  DMA mode:  If DMA controller is available on the 
                selected CPU and the receiver is configured to use DMA controller then this method returns the number of 
                characters in the receive buffer.
   - MC13191_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled,
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.  DMA mode:  If DMA controller is available on the selected CPU and the 
                receiver is configured to use DMA controller then this method returns the number of characters in the receive 
                buffer.
   - MC13191_SetShiftClockPolarity -Sets the shift clock polarity at runtime. Output data will be shifted on the selected edge 
                polarity.
   - MC13191_SetIdleClockPolarity -Sets the idle clock polarity at runtime. If the communication does not run, the clock signal 
                will have required level.

Module "SWI"       (bean InterruptVector)

Module "PWM1"      (bean PWM)
   - PWM1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%.  Note: Calculated duty depends on the timer possibilities and on the 
                selected period.
   - PWM1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number.
   - PWM1_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number.

Module "Cpu"       (bean MC9S08GT60_48)
   - Cpu_SetHighSpeed -Sets the high speed mode. The method is enabled only if low or slow speed mode is enabled in the bean as 
                well.
   - Cpu_SetLowSpeed -Sets the low speed mode. The method is enabled only if low speed mode is enabled in the bean.
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
